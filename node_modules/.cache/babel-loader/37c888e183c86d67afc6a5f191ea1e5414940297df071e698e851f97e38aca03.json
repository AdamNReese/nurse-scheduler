{"ast":null,"code":"var _jsxFileName = \"/Users/adamreese/code/scheduler/nurse-scheduler-app/src/components/ScheduleDisplay.js\";\nimport React from 'react';\nimport { Shift } from '../scheduler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScheduleDisplay = ({\n  schedule\n}) => {\n  if (!schedule || schedule.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-display\",\n      children: \"No schedule generated yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n  const groupedSchedule = {};\n  schedule.forEach(slot => {\n    const dateKey = slot.date.toDateString();\n    if (!groupedSchedule[dateKey]) {\n      groupedSchedule[dateKey] = [];\n    }\n    groupedSchedule[dateKey].push(slot);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"schedule-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Generated Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), Object.entries(groupedSchedule).map(([date, slots]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-day\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shifts\",\n        children: slots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shift ${slot.shift}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"shift-type\",\n            children: slot.shift === Shift.DAY ? 'Day Shift (7:00 AM - 7:00 PM)' : 'Night Shift (7:00 PM - 7:00 AM)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"assigned-nurses\",\n            children: slot.nurses && slot.nurses.length > 0 ? slot.nurses.map((nurse, nurseIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"nurse-name\",\n              children: nurse.name\n            }, nurseIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unassigned\",\n              children: \"UNASSIGNED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = ScheduleDisplay;\nexport default ScheduleDisplay;\nvar _c;\n$RefreshReg$(_c, \"ScheduleDisplay\");","map":{"version":3,"names":["React","Shift","jsxDEV","_jsxDEV","ScheduleDisplay","schedule","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","groupedSchedule","forEach","slot","dateKey","date","toDateString","push","Object","entries","map","slots","index","shift","DAY","nurses","nurse","nurseIndex","name","_c","$RefreshReg$"],"sources":["/Users/adamreese/code/scheduler/nurse-scheduler-app/src/components/ScheduleDisplay.js"],"sourcesContent":["import React from 'react';\nimport { Shift } from '../scheduler';\n\nconst ScheduleDisplay = ({ schedule }) => {\n  if (!schedule || schedule.length === 0) {\n    return <div className=\"schedule-display\">No schedule generated yet.</div>;\n  }\n\n  const groupedSchedule = {};\n  schedule.forEach(slot => {\n    const dateKey = slot.date.toDateString();\n    if (!groupedSchedule[dateKey]) {\n      groupedSchedule[dateKey] = [];\n    }\n    groupedSchedule[dateKey].push(slot);\n  });\n\n  return (\n    <div className=\"schedule-display\">\n      <h3>Generated Schedule</h3>\n      {Object.entries(groupedSchedule).map(([date, slots]) => (\n        <div key={date} className=\"schedule-day\">\n          <h4>{date}</h4>\n          <div className=\"shifts\">\n            {slots.map((slot, index) => (\n              <div key={index} className={`shift ${slot.shift}`}>\n                <span className=\"shift-type\">\n                  {slot.shift === Shift.DAY ? 'Day Shift (7:00 AM - 7:00 PM)' : 'Night Shift (7:00 PM - 7:00 AM)'}\n                </span>\n                <div className=\"assigned-nurses\">\n                  {slot.nurses && slot.nurses.length > 0 ? (\n                    slot.nurses.map((nurse, nurseIndex) => (\n                      <span key={nurseIndex} className=\"nurse-name\">\n                        {nurse.name}\n                      </span>\n                    ))\n                  ) : (\n                    <span className=\"unassigned\">UNASSIGNED</span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}